---
import "../styles/global.css";

const { title = "Shooting Quarterly" } = Astro.props;
const pathname = Astro.url.pathname;

/** Normalize paths for consistent matching */
const normalize = (p: string) =>
  p !== "/" && p.endsWith("/") ? p.slice(0, -1) : p;

/** Match exact path and section roots */
const isCurrent = (href: string): boolean => {
  const path = normalize(pathname);
  const target = normalize(href);
  if (target === "/") return path === "/";
  return path === target || path.startsWith(`${target}/`);
};

/** Navigation configuration */
const navItems = [
  { href: "/", label: "Home" },
  { href: "/blog", label: "Blog" },
  { href: "/book", label: "Book" },
  { href: "/about", label: "About" },
  { href: "/contact", label: "Contact" },
];

/** Generate nav classes using YOUR brand colors */
const getNavClasses = (href: string) => {
  const baseClasses =
    "text-scorpion hover:text-christine focus:text-christine transition-colors duration-200 hover:underline";
  const activeClasses = "text-christine font-medium";

  return isCurrent(href) ? `${baseClasses} ${activeClasses}` : baseClasses;
};

/** Set aria-current for active links */
const getAriaCurrent = (href: string) => (isCurrent(href) ? "page" : undefined);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="Shooting Quarterly - Shooting is Soothing! Building a connected sport shooting community."
    />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- Optimized font loading -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap"
      rel="stylesheet"
    />

    <title>{title} — Shooting Quarterly</title>

    <style>
      /* Critical: Add these styles for touch feedback */
      @media (hover: none) and (pointer: coarse) {
        /* Real mobile devices */
        a[href="/"]:active {
          color: #e9560d !important;
        }
      }

      /* For when JavaScript adds the class */
      .logo-touching {
        color: #e9560d !important;
        transition: none !important;
      }

      /* Data attribute approach */
      a[href="/"][data-touching="true"] {
        color: #e9560d !important;
      }
    </style>

    <script>
      // Single, unified touch handler that works everywhere
      if (typeof window !== "undefined") {
        document.addEventListener("DOMContentLoaded", () => {
          const initLogoTouch = () => {
            const logo = document.querySelector('a[href="/"]');
            if (!logo) {
              console.log("Logo not found");
              return;
            }

            console.log("Initializing logo touch handler");

            let touchActive = false;
            let touchTimeout;
            let styleElement;

            const activateOrange = () => {
              if (touchActive) return;
              touchActive = true;

              console.log("Activating orange color");

              // Method 1: Dynamic style element (highest priority)
              if (!styleElement) {
                styleElement = document.createElement("style");
                styleElement.id = "logo-touch-style";
                styleElement.textContent = `
                  a[href="/"] {
                    color: #E9560D !important;
                    transition: none !important;
                  }
                `;
                document.head.appendChild(styleElement);
              }

              // Method 2: Multiple attributes for redundancy
              logo.setAttribute("data-touching", "true");
              logo.classList.add("logo-touching");

              // Method 3: Inline style as backup
              logo.style.cssText = "color: #E9560D !important;";

              // Clear any existing timeout
              clearTimeout(touchTimeout);

              // Keep orange for 3 seconds
              touchTimeout = setTimeout(() => {
                deactivateOrange();
              }, 3000);
            };

            const deactivateOrange = () => {
              console.log("Deactivating orange color");
              touchActive = false;

              // Remove all style modifications
              if (styleElement) {
                styleElement.remove();
                styleElement = null;
              }
              logo.removeAttribute("data-touching");
              logo.classList.remove("logo-touching");
              logo.style.cssText = "";
            };

            // CRITICAL: Handle both touch AND pointer events for DevTools
            logo.addEventListener(
              "touchstart",
              (e) => {
                console.log("Real touchstart event");
                activateOrange();
              },
              { passive: true }
            );

            // This is what Chrome DevTools actually fires
            logo.addEventListener("pointerdown", (e) => {
              if (e.pointerType === "touch" || e.pointerType === "pen") {
                console.log("Pointer event (touch simulation)");
                activateOrange();
              }
            });

            // For desktop testing - click simulation
            logo.addEventListener("click", (e) => {
              // Only activate on desktop (no touch support)
              if (
                !("ontouchstart" in window) &&
                !window.matchMedia("(pointer: coarse)").matches
              ) {
                console.log("Desktop click - simulating touch");
                e.preventDefault();
                activateOrange();
              }
            });

            // Handle touchend/pointerup to ensure cleanup
            logo.addEventListener("touchend", () => {
              console.log("Touchend - waiting before cleanup");
            });

            logo.addEventListener("pointerup", (e) => {
              if (e.pointerType === "touch" || e.pointerType === "pen") {
                console.log("Pointerup - waiting before cleanup");
              }
            });
          };

          // Initialize immediately
          initLogoTouch();

          // Reinitialize after Astro navigation
          document.addEventListener("astro:after-swap", initLogoTouch);
        });
      }
    </script>
  </head>

  <body
    class="min-h-screen flex flex-col bg-black-haze text-pure-black font-sans"
  >
    <!-- Header with Navigation -->
    <header class="bg-white shadow-md border-b border-black-haze">
      <div
        class="container mx-auto px-4 py-4 flex items-center justify-between"
      >
        <!-- Logo/Brand with proper mobile hover states -->
        <a
          href="/"
          class="text-xl font-bold text-pure-black hover:text-christine focus:text-christine active:text-christine transition-colors duration-200 touch-manipulation"
        >
          Shooting Quarterly
        </a>

        <!-- Mobile Menu Button -->
        <button
          class="sm:hidden text-scorpion hover:text-christine transition-colors duration-200"
          id="mobile-menu-button"
          aria-label="Toggle navigation menu"
          aria-expanded="false"
          aria-controls="mobile-menu"
        >
          <svg
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>

        <!-- Desktop Navigation -->
        <nav
          class="hidden sm:flex space-x-6 text-sm"
          aria-label="Main navigation"
        >
          {
            navItems.map(({ href, label }) => (
              <a
                href={href}
                class={getNavClasses(href)}
                aria-current={getAriaCurrent(href)}
              >
                {label}
              </a>
            ))
          }
        </nav>
      </div>

      <!-- Mobile Navigation -->
      <div
        id="mobile-menu"
        class="sm:hidden hidden bg-white border-t border-black-haze"
        role="navigation"
        aria-label="Mobile navigation"
      >
        <div class="px-4 py-3 space-y-3">
          {
            navItems.map(({ href, label }) => (
              <a
                href={href}
                class={`block text-sm ${getNavClasses(href)}`}
                aria-current={getAriaCurrent(href)}
              >
                {label}
              </a>
            ))
          }
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <main class="flex-1 container mx-auto px-4 py-8">
      <slot />
    </main>

    <!-- Footer -->
    <footer
      class="bg-black-haze text-scorpion text-center text-xs py-4 border-t border-black-haze/50"
    >
      <p>
        © {new Date().getFullYear()} Shooting Quarterly - Shooting is Soothing!
      </p>
    </footer>

    <!-- Mobile Menu JavaScript Only (no logo touch handling here!) -->
    <script is:inline>
      // Mobile menu toggle ONLY - removed all logo touch code from here
      const menuButton = document.getElementById("mobile-menu-button");
      const mobileMenu = document.getElementById("mobile-menu");

      if (menuButton && mobileMenu) {
        menuButton.addEventListener("click", () => {
          const isExpanded =
            menuButton.getAttribute("aria-expanded") === "true";

          // Toggle menu visibility
          mobileMenu.classList.toggle("hidden");

          // Update aria-expanded
          menuButton.setAttribute("aria-expanded", (!isExpanded).toString());
        });

        // Close menu when clicking a link
        mobileMenu.querySelectorAll("a").forEach((link) => {
          link.addEventListener("click", () => {
            mobileMenu.classList.add("hidden");
            menuButton.setAttribute("aria-expanded", "false");
          });
        });

        // Close menu on escape key
        document.addEventListener("keydown", (e) => {
          if (e.key === "Escape" && !mobileMenu.classList.contains("hidden")) {
            mobileMenu.classList.add("hidden");
            menuButton.setAttribute("aria-expanded", "false");
            menuButton.focus();
          }
        });
      }

      // NO LOGO TOUCH CODE HERE - it's all in the head script now
    </script>
  </body>
</html>
